{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"My personal notes on concepts worth mentioning.","title":"Home"},{"location":"architecture/practice/","text":"Components are only half the architecture When we think of systems architecture we usually see a diagram with components and their relations, sometimes complemented with principles on how to structure them. Components are only half the architecture though. The other half are the people and their practices that make the components. These are at least as important, but are almost never taken into consideration. This is like the design of a car, without the factory to actually make it. These practices should be centered around change and maintenance as systems do not run themselves. They require continual adaptation and maintenance after their initial conception to stay relevant. Like the car, it needs a garage and maintenance schedule. Or maybe there is no garage in IT and we are the factory that needs to reproduce a fitting means of transportation each day. Be it a sedan, or a station wagon or an SUV. All the more reason to pay attention the the architecture of the factory than the design of the car. That factory is us and our practices.","title":"Practice"},{"location":"architecture/practice/#components-are-only-half-the-architecture","text":"When we think of systems architecture we usually see a diagram with components and their relations, sometimes complemented with principles on how to structure them. Components are only half the architecture though. The other half are the people and their practices that make the components. These are at least as important, but are almost never taken into consideration. This is like the design of a car, without the factory to actually make it. These practices should be centered around change and maintenance as systems do not run themselves. They require continual adaptation and maintenance after their initial conception to stay relevant. Like the car, it needs a garage and maintenance schedule. Or maybe there is no garage in IT and we are the factory that needs to reproduce a fitting means of transportation each day. Be it a sedan, or a station wagon or an SUV. All the more reason to pay attention the the architecture of the factory than the design of the car. That factory is us and our practices.","title":"Components are only half the architecture"},{"location":"deep-work/rules/","text":"Deep Work Rules Rules for a rythmic deep work schedule. Plan sessions of 60 to 90 minutes in your agenda for doing deep work. Plan this weekly and refine daily at set times. Plan both subject and goal for each session in advance. Follow the optimal process given de subject during each session. At the start of the session close all communication and distractions. Open only your reference material and your output. Put on your headphone and start supporting music. Set your phone to quiet and put it face down on the table. Close Teams, Chats and Emails. Close Planners and Agendas. Close Windows that don't contribute to the subject. Close Notes. Open a new notepad if needed. At the end of the session open all communication channels and answer all simple and urgent requests. Stop the music. Check your phone for calls and messages. Open Teams, Chats and Emails. Evaluate the sessions ouput and process.","title":"Rules"},{"location":"deep-work/rules/#deep-work-rules","text":"Rules for a rythmic deep work schedule. Plan sessions of 60 to 90 minutes in your agenda for doing deep work. Plan this weekly and refine daily at set times. Plan both subject and goal for each session in advance. Follow the optimal process given de subject during each session. At the start of the session close all communication and distractions. Open only your reference material and your output. Put on your headphone and start supporting music. Set your phone to quiet and put it face down on the table. Close Teams, Chats and Emails. Close Planners and Agendas. Close Windows that don't contribute to the subject. Close Notes. Open a new notepad if needed. At the end of the session open all communication channels and answer all simple and urgent requests. Stop the music. Check your phone for calls and messages. Open Teams, Chats and Emails. Evaluate the sessions ouput and process.","title":"Deep Work Rules"},{"location":"deep-work/types/","text":"Deep Work Types Concept (architecture) Result: The definition and structuring of concepts that form the context of design. The main input of this type of work should be function. Design Result: Diagrams with supporting descriptions and assumptions that form the basis of future builds or clarify recent new builds. A design satisfies a complex set of goals (requirements). Design requires detailed knowledge of the build options, which comes from both documentation and build experience. It might also require the knowledge of previous designs like frameworks and standards if they are available. So design work should be preceded by the search for such designs. Build Result: Automated deployment of a service or component that satisfies a clear goal. Build work requires a clear goal and optionally a design when available. Note that Build and Design form an interplay. Build work is the transformation of documentation and experience into an automated deployment. Process Result: Work instructions that are simple enough to become habits.","title":"Types"},{"location":"deep-work/types/#deep-work-types","text":"","title":"Deep Work Types"},{"location":"deep-work/types/#concept-architecture","text":"Result: The definition and structuring of concepts that form the context of design. The main input of this type of work should be function.","title":"Concept (architecture)"},{"location":"deep-work/types/#design","text":"Result: Diagrams with supporting descriptions and assumptions that form the basis of future builds or clarify recent new builds. A design satisfies a complex set of goals (requirements). Design requires detailed knowledge of the build options, which comes from both documentation and build experience. It might also require the knowledge of previous designs like frameworks and standards if they are available. So design work should be preceded by the search for such designs.","title":"Design"},{"location":"deep-work/types/#build","text":"Result: Automated deployment of a service or component that satisfies a clear goal. Build work requires a clear goal and optionally a design when available. Note that Build and Design form an interplay. Build work is the transformation of documentation and experience into an automated deployment.","title":"Build"},{"location":"deep-work/types/#process","text":"Result: Work instructions that are simple enough to become habits.","title":"Process"}]}